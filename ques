
**1. Accessing s3 from ec2 using aws cli without access and secret key?**
Using IAM roles we can achiev this
Create IAM role for ec2 with policy to access s3 
By doing above we don'nt need to configure access and secret key

**2. What is IAM role and its used for?**
A role describes the permissions to access resources.
By doing this, the applications or services assume the role (permissions) at run time. This means that AWS is providing to the application or the user temporary security credentials that can be used whenever they need access to those resources.
IAM roles are designed so that our applications can securely make API requests from our instances, without requiring us to manage the security credentials that the applications use. Instead of creating and distributing our AWS credentials, we delegate permission to make API requests using IAM roles as follows:


**3. RDS Multi AZ vs Read Replica:**
Multi-AZ deployment is a AWS managed offering where you get hot-standby replica of your RDS in a different Availability Zone which will substitute automatically your master/primary database in case of its maintenance, failure or AZ failure
One very important thing to note here is we can’t access the other instance (standby instanace) prior to the failover. Only a failure of primary database will make the standby available for use. So basically it maintains database availability against failure.

In case we need to offload the primary database we need to use Read-Replica. This is done manually by right clicking on DB instance. Once a Read-Replica is created, after a few minutes (or more depending on the storage size) it will be ready to accept connections from authorized users depending on Security Groups.
Once created we can use this new instance mainly for performance and backups:
By diverting read queries (select statement) to replicas, keeping in mind the replica lag, we can easily scale out our application.
We can also use the Read Replica as a failover instance. In case of failure you need to manually make the read Replica to a primary.
To decrease the risk of a single AWS Availability Zone failure we should deploy the Read Replica in a different AZ respect to the master instance.
Main difference here is Multi-AZ is purely backup and recovery option. Its totally automated and managed by AWS. There is no lag in this case. While read replica is manual and it can be used for performance as well. There is slight lag in here.


**4. What is connection draining in ELB?**
Enabling connection draining feature in a load balancer makes sure that any back-end instances you have deregistered will complete requests in progress before the deregistration process starts. Also, if a back-end instance fails to keep up with the recommended health checks, then the load balancer does not send any new requests to the unhealthy instance. Although it will still allow existing requests to complete.
AWS ELB connection draining prevents breaking open network connections while taking an instance out of service, updating its software, or replacing it with a fresh instance that contains updated software. Connection draining avoids the situation of broken connection being displayed as a half-drawn web page, an aborted file download, or a failed web service call. It is recommended that connection draining should be enabled for your Elastic Load Balancers to ensure fault tolerance in your cloud infra.
Centilytics provides an insight which warns the user whenever a load balancer with disabled connection draining is detected.
Enabling this feature will allow better management of the resources behind the Elastic Load Balancer, such as replacing backend instances without impacting the user experience. For example, taking an instance out of service and replacing it with a fresh EC2 instance that contains updated software, while avoid breaking open network connections.

**5. Application Deployment types**
  Blue/Green deployment
  Rolling deployment
  Canary deployment
  Recreate deployment
  A/B deployment
  
https://dev.to/mostlyjason/intro-to-deployment-strategies-blue-green-canary-and-more-3a3
https://medium.com/@cgrant/deployment-strategies-release-best-practices-6e557c3f39b4

**6. DR plans AWS**
1. Backup and Restore
2. Pilot light
3. warm standby
4. Hot standby
5. N2WS recovary software for AWS


**5. Devops Day to day works:**
 1. Make sure that the pipeline is running smoothly – This is one of the most important task of a DevOps engineer to make sure that CI/CD pipeline is intact and fixing any issue or failure with it is the #1 priority for the day. They often need to spend time on troubleshooting, analysing and providing fixes to issues.
 2. Interaction with other teams – Co-ordination and collaboration is the key for DevOps to be successful and hence daily integration with Dev and QA team, Program management, IT is always required.
 3. Work on Automation Backlog – Automation is soul of DevOps so DevOps engineering need to plan it out and I can see DevOps engineer spending lots of time behind the keyboard working on Automating stuff on daily basis.
 4. Infrastructure Management – DevOps engineer are also responsible for maintaining and managing the infrastructure required for CI/CD pipeline and making sure that its up and running and being used optimally is also part of their daily schedule. Ex. Working on Backup, High Availability, New Platform setup etc.
 5. Exploration – DevOps leverage a lot from the various tools which are available, there are many options as open source so team need to regularly check on this to make sure the adoptions as required, this is something which also require some effort not on daily but regular basis. Ex. What are open source options available to keep the cost at minimum?
 6. Removing bottleneck – DevOps primary purpose is identify the bottlenecks / Manual handshakes and work with everyone involved (Dev / QA and all other stakeholder) to remove them so team spend good amount of time in finding such things and build the Automation Backlog using this. Ex. How we can get builds faster?
 7. Documentation – Though Agile / DevOps stresses less on the documentation, it is still the important one which DevOps engineer does on daily basis, Be it Server Information, Daily Week charted, Scrum / Kanban board or Simple steps to configure / backup or modify the infrastructure, you need to spent good amount of time in coming up these artifacts.
 8. Training and Self Development – Self leaning and Training is very useful in getting better understanding and many organisations encourage their employee to take the time out and do some of these and same holds true for DevOps folks as well, So learn something new everyday...
 9.Continuous Improvement as Practice – Last but not least, It’s up to the DevOps folks to build awareness on the potential of CI/CD and DevOps practices and building a culture of leveraging it for doing things better, reducing re-work, increasing the productivity and optimising the use of existing resources. Go and talk to people to build the DevOps and Continuous Improvement culture...
 Load and Perfomance testing
 AWS billing 


